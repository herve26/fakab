// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model CustomerConnections {
  id String @id @default(cuid())
  
  so String @unique
  customer_details String
  customer_contact String
  customer_address String
  area String
  geo_localization String
  connection_type String
  has_mdu Boolean @default(false)
  assignement_date DateTime @default(now())
  completion_date DateTime?

  team Team? @relation(fields: [teamId], references: [id])
  teamId Int?

  materialUsed MaterialUsed[]

  documentResources DocumentResource[]
}

model MaterialUsed {
  customer CustomerConnections @relation(fields: [customerId], references: [id])
  customerId String

  material Material @relation(fields: [materialId], references: [materialId])
  materialId Int

  quantity Int
  @@id([customerId, materialId])
}

model Employee {
  employeeId Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  startDate DateTime
  endDate DateTime?
  
  inChargeOf Team? @relation("inChargeRef", fields: [inChargeOfId], references: [id])
  inChargeOfId Int? @unique

  team Team? @relation("teamRef", fields: [teamId], references: [id])
  teamId Int?
}

model Team {
  id      Int      @id @default(autoincrement())
  name    String

  inCharge Employee? @relation("inChargeRef")

  members Employee[] @relation("teamRef")

  connections CustomerConnections[]

  teamMaterials TeamMaterials[]
}

model TeamMaterials {
  team Team @relation(fields: [teamId], references: [id])
  teamId Int

  material Material @relation(fields: [materialId], references: [materialId])
  materialId Int

  quantity Int
  
  @@id([teamId, materialId])
}

model Material {
  materialId Int @id @default(autoincrement())
  materialName String @unique
  materialCode String @unique
  materialDesc String?

  materialUnit MaterialUnit @relation(fields: [materialUnitCode], references: [unitCode])
  materialUnitCode String

  orderDetail OrderDetail[]

  teamMaterial TeamMaterials[]

  customerMaterial MaterialUsed[]
}

model MaterialUnit {
  unitCode String @id
  unitName String

  material Material[]
}

model Order {
  orderId Int @id @default(autoincrement())
  orderDate DateTime
  status String @default("PENDING")

  details OrderDetail[]

  supplier Supplier? @relation(fields: [supplierId], references: [supplierId])
  supplierId Int?

}

model OrderDetail {
  orderDetailId Int @id @default(autoincrement())
  orderQuantity Int
  receivedDate DateTime?

  order Order @relation(fields: [orderId], references: [orderId])
  orderId Int

  material Material @relation(fields: [materialId], references: [materialId])
  materialId Int

  unitPrice Decimal?
}

model Supplier {
  supplierId Int @id @default(autoincrement())
  supplierName String
  contactPerson String?
  phoneNumber String?
  email String?
  address String?

  supplierType String @default("MERCHANT") // Changed to String

  orders Order[]
}

model DocumentTemplate {
  documentId          Int       @id @default(autoincrement())
  documentName        String @unique
  documentDesc String?
  documentCode  String @unique
  documentType        String?   // Optional type for categorizing templates

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  templateDocument DocumentResource?
}

model DocumentResource {
  id          Int       @id @default(autoincrement())
  name        String
  contentType String?
  size        Int?
  tag         String?
  // Use a String to accommodate various file paths and storage options
  url         String?
  path        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  customer    CustomerConnections? @relation(fields: [customerId], references: [id])
  customerId  String?

  documentTemplate DocumentTemplate? @relation(fields: [documentTemplateId], references: [documentId])
  documentTemplateId Int? @unique
}
